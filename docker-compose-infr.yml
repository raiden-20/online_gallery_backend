version: "3.9"
services:
  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: nginx
    restart: on-failure
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/cert/private.key:/etc/ssl/private.key
      - ./nginx/cert/www_gallery_lindero_ru_2024_12_25.crt:/etc/ssl/bundle.crt
#      - ./nginx/index.html:/var/www/html/index.html
      - ./nginx/dhparams4096.pem:/dhparams4096.pem
    ports:
      - 80:80
      - 443:443
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - online_gallery

  postgres_db:
    container_name: postgres_db
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - ./init_db/postgres_init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - online_gallery

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    restart: unless-stopped
    command:
      ["start-dev"]
    environment:
      KC_DB: postgres
      KC_DB_URL: ${KEYCLOAK_POSTGRES_URL}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - 8080:8080
    volumes:
      - ./keycloak/gallery-login:/opt/keycloak/themes/gallery_login
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master" ]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - online_gallery

  minio:
    container_name: minio
    image: minio/minio:${MINIO_VERSION}
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - online_gallery
    command: server --console-address ":9001" /data   

networks:
  online_gallery:
    name: online_gallery

volumes:
  postgres_db:
    name: postgres_db
  minio:
    name: minio 